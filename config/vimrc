""
"" tubbo's vimrc
""

"" Vundle is used for dependency management

" Load plug-in environment
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'


"" Application


" Get Vim working with `sudo`
"Bundle 'vim-scripts/sudo.vim'

" No need to be backwards-compatible with Vi
set nocompatible

" Show line numbers
set number

" Show line/column ruler
set ruler

" Use UTF-8 as our default charset
set encoding=utf-8

" Use the default login shell inside Vim
set shell=$SHELL

" Automatically reload files when a change occurs
set autoread

" Show partial command in the status line
set showcmd

" Use the system clipboard
set clipboard=unnamed

" Make Powerline work on single-file sessions
set laststatus=2

" Set leader key to ','
let mapleader = ","

" Turn backups off since we store everything in Git
set nobackup
set nowb
set noswapfile

" Keep undo persisted across sessions
set undodir=~/.vim/undo
set undofile

" Disable sounds and visual bells
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Whitespace settings
set wrap                          " turn word wrap on
set textwidth=72                  " attempt to enforce 72 chars
set linebreak                     " wait for word char to break lines
set tabstop=2                     " a tab is two spaces
set smartindent                   " automatic indentation
set autoindent
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

" View invisible characters
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen

" Ignore files that Vim can't edit
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.swp,*~,._*
" Ignore Rails 2.x files
set wildignore+=vendor/rails**,vendor/plugins**

" Backup and swap files
set backupdir=~/.vim/_backup//    " where to put backup files.
set directory=~/.vim/_temp//      " where to put swap files.

" Easy saving of files
nnoremap Z :w<cr>
nnoremap ZZ :wq<cr>

" Easy command editing
nnoremap  ;  :

"" Configuration Editing

" Open Vim configuration in a new tab
map <leader>c :tabnew ~/.vimrc<cr>

" ,b to install the Bundle from within Vim
map <leader>b :BundleInstall<cr>:q<cr>

" Auto-load Vim configuration after a change
autocmd BufWritePost *.vimrc nested source ~/.vimrc


"" Search

" Search docs with Dash.app
map <leader>d :Dash!<cr>

" Highlight search terms by default
set nohlsearch
nnoremap <C-L> :set hlsearch!<cr>
nnoremap <C-l> :nohl<cr>

" In-file fulltext search options
set hlsearch!   " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

Bundle 'Shougo/vimproc.vim'
Bundle 'Shougo/unite.vim'

" Ignore unimportant files in file search
call unite#custom#source('file_rec', 'ignore_pattern', 'vendor/*')

" Project-wide file goto
nnoremap <C-t> :Unite -start-insert file_rec<cr>

" Project-wide file search
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts =
  \ '--line-numbers --nocolor --nogroup --hidden --ignore ' .
  \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
let g:unite_source_grep_recursive_opt = ''
nnoremap <space>/ :Unite grep<cr>

" Yank history search
nnoremap <space>y :Unite history/yank<cr>

" Open buffer goto
nnoremap <space>s :Unite -quick-match buffer<cr>

"" Tab key

" Use <tab> for autocompletion in INSERT mode by checking for a space
" on the next column. If there is one, insert a 'tab'. Otherwise, try
" to autocomplete the word prior to the current column.
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
      return "\<tab>"
  else
      return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

"" Navigation

" Alternate through tabs
map <leader>m :tabn<cr>
map <C-w>t :tabn<cr>

" Remap :W => :w to avoid errors
command! W w
command! Q q
map ; :

"" Test Running

"Bundle 'skalnik/vim-vroom'

" Configure Vroom to use RSpec and M as test runners.
let g:vroom_use_binstubs = 0
let g:vroom_use_colors = 1
let g:vroom_map_keys = 0
let g:vroom_spec_command = 'rspec --format=progress '
let g:vroom_test_unit_command = 'm'

" ,r runs the nearest test
nnoremap <leader>r :VroomRunNearestTest<cr>

" ,R runs the whole test file from inside Vim
nnoremap <leader>R :VroomRunTestFile<cr>

" ,. switches to the test alternate
nnoremap <leader>. :A<cr>


" Disable code folding
set foldmethod=manual
set foldlevel=99

" For tmux, disable background clearing
set t_ut=

"" Git and GitHub

" Save to Gist from Vim
Bundle 'mattn/gist-vim'
Bundle 'mattn/webapi-vim'

" Integrate with Git
Bundle 'tpope/vim-fugitive'

" Copy Gists to clipboard after creation
let g:gist_clip_command = 'pbcopy'
" Detect filetype by file extension (just like on gist.github.com)
let g:gist_detect_filetype = 1
" Post all Gists as private unless otherwise noted
let g:gist_post_private = 1
" Enable multi-file Gists
let g:gist_get_multiplefile = 1
" Use ,g to create a single-file Gist
map <leader>g :Gist<cr>
" Use ,G to create a multi-file Gist of all buffers
map <leader>G :Gist -m<cr>

"" Vimwiki

Bundle 'vim-scripts/vimwiki'

" Open Vimwiki
map <leader>p :filetype plugin on<cr>
map <leader>/ <leader>p<leader>wt
" Vimwiki should use files in ~/Documents/Wiki
let g:vimwiki_list = [{ 'path': '~/Documents/Wiki', 'path_html': '~/Library/Application Support/Dash/DocSets/Wiki/Contents/Resources/Documents/' }]


" Disable modelines for security
set modelines=0

" Highlight RSpec code in every project with the same strategy
autocmd BufRead *_spec.rb syn keyword rubyRspec describe context it specify it_should_behave_like before after setup subject its shared_examples_for shared_context let
highlight def link rubyRspec Function


"" MacVim

" Special MacVim configuration (must be in vimrc for some reason)
if exists("g:enable_mvim_shift_arrow")
  let macvim_hig_shift_movement = 1 " mvim shift-arrow-keys
endif

"" Tmux integration

" Run Tmux commands within Vim
Bundle 'benmills/vimux'


"" Cosmetics


" Use Powerline for a colorful status bar
Bundle 'Lokaltog/vim-powerline'


" Run code through syntax checker before save
Bundle 'scrooloose/syntastic'

" Use solarized-light as a color scheme
Bundle 'altercation/vim-colors-solarized'
let g:solarized_italic=0
filetype on
syntax on
colorscheme solarized
set background=light

" When opening a file, jump to the last cursor position
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif



"" Ruby

" Auto-add Ruby `end` keywords
Bundle 'tpope/vim-endwise'

" Alternative Ruby extensions
autocmd BufEnter *.rake,*file set filetype=ruby

" Alternative YAML extensions
autocmd BufEnter *.gemrc set filetype=yaml
autocmd BufEnter gemrc.erb set filetype=yaml
autocmd BufEnter *.fdoc*,*.pv,Procfile set filetype=yaml

" Syntax highlighting for Rails & testing
Bundle 'tpope/vim-rails'
Bundle 'Keithbsmiley/rspec.vim'
Bundle 'tsaleh/vim-shoulda'

" Disable wrapping in Rails view files
autocmd FileType erb,html,haml,emblem set nowrap
autocmd FileType erb,html,haml,emblem set tw=999
autocmd FileType markdown set ai formatoptions=tcroqn2 comments=n:&gt

" Use RSpec syntax for spec files and spec_helper
autocmd BufEnter *_spec.rb,spec_*.rb set filetype=rspec

" Ignore 3rd-party Ruby files in searches
set wildignore+=vendor/gems/**

" Enforce Ruby 1.9 syntax on the line this command was called upon
map <leader>h :s/:\([a-z0-9_]\+\)\s*=>/\1: /g<cr>

" Automatically run RSpec and Test::Unit examples
Bundle 'skalnik/vim-vroom'

" Run tests in a connected Tmux pane
let g:vroom_use_vimux = 1

"" Javascript

Bundle 'leshill/vim-json'
Bundle 'kchmck/vim-coffee-script'
Bundle 'nono/vim-handlebars'
Bundle 'heartsentwined/vim-emblem'
Bundle 'heartsentwined/vim-ember-script'

" Alternative extensions for JS
autocmd BufEnter *.bowerrc set filetype=json
autocmd BufEnter .slate set filetype=javascript
autocmd BufEnter Cakefile set filetype=coffee
autocmd BufEnter *.js.em set filetype=ember-script
autocmd BufEnter *.js.coffee set filetype=coffee
autocmd BufEnter *.coffee set filetype=coffee
autocmd BufEnter *.emblem set filetype=emblem

"" Python

" In Python, maintain strict 4-space indents and don't word wrap
autocmd FileType python set sw=4 sts=4 tw=0

" Strip whitespace in Python
autocmd BufWritePre *.py :%s/\s\+$//e


"" Markdown

Bundle 'plasticboy/vim-markdown'

" Alternative extensions for Markdown
autocmd BufEnter *.mkd,*.markdown,*.md set filetype=markdown

"" Elixir

Bundle 'elixir-lang/vim-elixir'
autocmd BufEnter *.exs set filetype=elixir
autocmd BufEnter *.ex set filetype=elixir
