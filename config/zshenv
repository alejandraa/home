# ZSH configuration for all shells.
#
# Environment variable definitions go here, but that's about it. All
# other definitions go into zshrc or lib/plugins.

# Set the path to our shell configuration.
ZSH=$HOME/.dots
DOTS=$ZSH

# Set our shell paths to load from all of the bin's on the machine.
GOPATH=$HOME/Code/Go
PATH=/Applications/Postgres.app/Contents/MacOS/bin:/usr/local/bin:/usr/local/sbin:/usr/local/share/npm/bin:/usr/local/Cellar/python/2.7.1/bin:/usr/local/git/bin:/usr/bin:$HOME/.dots/bin:$HOME/.rvm/bin:node_modules/.bin:$GOPATH:/usr/local/Cellar/python/2.7.1/lib/python2.7/site-packages:$PATH
MANPATH=/opt/local/share/man:$MANPATH

# Text editing and paging
#VISUAL='mvim -f --nomru -c "au VimLeave * !open -a iTerm"'
VISUAL='mvim'
EDITOR='vim'
PAGER='less -R'
DRAWER=true # use macvim_drawer

# A more basic version of my promptstring for non-interactive shells.
PROMPT="â™¬  "

# PostgreSQL config
ARCHFLAGS='-arch x86_64'
PGDATA=/usr/local/var/postgres

# Configure the MySQL prompt to show more information.
MYSQL_PS1="\R:\m:\s \h> "

# Define the C compiler as GCC 4.2
CC=/usr/local/bin/gcc-4.2

# Disable weekly automatic update.
DISABLE_AUTO_UPDATE="true"

# Don't set iTerm/Terminal's title automatically.
DISABLE_AUTO_TITLE="true"

# Display red dots when ZSH is hanging.
COMPLETION_WAITING_DOTS="true"

# Load the framework.
source "$ZSH/lib/dots.sh"

# Make Ruby even faster
RUBY_HEAP_MIN_SLOTS=1000000
RUBY_HEAP_SLOTS_INCREMENT=1000000
RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
RUBY_GC_MALLOC_LIMIT=1000000000
RUBY_HEAP_FREE_MIN=500000

# Always use Bundler with RVM.
USE_BUNDLER=force

# Colorize Grep
export GREP_OPTIONS='--color=auto'
export GREP_COLOR='1;32'

# Use the Turn testing engine on eLocal
export USE_TURN=true

# Load interactive shell settings
source ~/.zshrc

# Enable 'vi mode', which is vi/vim keybindings inside ZSH. Overrides
# the default 'emacs mode', which uses Emacs keybindings found in other
# OS X applications. May remove some "Mac-like" functionality, if that's
# what you're used to, so comment out if you want the defaults.
bindkey -v
# Retain search-forward and search-backward bindings from `bindkey -e`
for i in vi{ins,cmd}; do bindkey -M "$i" "${terminfo[kcuu1]}" history-beginning-search-backward; done
for i in vi{ins,cmd}; do bindkey -M "$i" "${terminfo[kcud1]}" history-beginning-search-forward; done
